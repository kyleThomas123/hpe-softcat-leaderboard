{"ast":null,"code":"var _excluded = [\"a11yTitle\", \"defaultSuggestion\", \"defaultValue\", \"dropAlign\", \"dropHeight\", \"dropTarget\", \"dropProps\", \"focusIndicator\", \"icon\", \"id\", \"messages\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onSelect\", \"onSuggestionSelect\", \"onSuggestionsClose\", \"onSuggestionsOpen\", \"placeholder\", \"plain\", \"readOnly\", \"reverse\", \"suggestions\", \"textAlign\", \"value\", \"width\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { FormContext } from '../Form/FormContext';\nimport { AnnounceContext } from '../../contexts';\nimport { isNodeAfterScroll, isNodeBeforeScroll, sizeStyle, useForwardedRef, useSizedIcon } from '../../utils';\nimport { StyledTextInput, StyledTextInputContainer, StyledPlaceholder, StyledIcon, StyledSuggestions } from './StyledTextInput';\nimport { MessageContext } from '../../contexts/MessageContext';\nimport { TextInputPropTypes } from './propTypes';\nvar renderLabel = function renderLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    return suggestion.label || suggestion.value;\n  }\n  return suggestion;\n};\nvar stringLabel = function stringLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    if (suggestion.label && typeof suggestion.label === 'string') {\n      return suggestion.label;\n    }\n    return suggestion.value;\n  }\n  return suggestion;\n};\nvar ContainerBox = styled(Box).withConfig({\n  displayName: \"TextInput__ContainerBox\",\n  componentId: \"sc-1ai0c08-0\"\n})([\"\", \";@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\"], function (props) {\n  return props.dropHeight ? sizeStyle('max-height', props.dropHeight, props.theme) : 'max-height: inherit;';\n});\nvar defaultDropAlign = {\n  top: 'bottom',\n  left: 'left'\n};\nvar TextInput = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _inputRef$current;\n  var a11yTitle = _ref.a11yTitle,\n    defaultSuggestion = _ref.defaultSuggestion,\n    defaultValue = _ref.defaultValue,\n    _ref$dropAlign = _ref.dropAlign,\n    dropAlign = _ref$dropAlign === void 0 ? defaultDropAlign : _ref$dropAlign,\n    dropHeight = _ref.dropHeight,\n    dropTarget = _ref.dropTarget,\n    dropProps = _ref.dropProps,\n    _ref$focusIndicator = _ref.focusIndicator,\n    focusIndicator = _ref$focusIndicator === void 0 ? true : _ref$focusIndicator,\n    icon = _ref.icon,\n    id = _ref.id,\n    messages = _ref.messages,\n    name = _ref.name,\n    _onBlur = _ref.onBlur,\n    onChange = _ref.onChange,\n    _onFocus = _ref.onFocus,\n    onKeyDown = _ref.onKeyDown,\n    onSelect = _ref.onSelect,\n    onSuggestionSelect = _ref.onSuggestionSelect,\n    onSuggestionsClose = _ref.onSuggestionsClose,\n    onSuggestionsOpen = _ref.onSuggestionsOpen,\n    placeholder = _ref.placeholder,\n    plain = _ref.plain,\n    readOnly = _ref.readOnly,\n    reverse = _ref.reverse,\n    suggestions = _ref.suggestions,\n    textAlign = _ref.textAlign,\n    valueProp = _ref.value,\n    widthProp = _ref.width,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var _useContext = useContext(MessageContext),\n    format = _useContext.format;\n  var announce = useContext(AnnounceContext);\n  var formContext = useContext(FormContext);\n  var inputRef = useForwardedRef(ref);\n  var dropRef = useRef();\n  var suggestionsRef = useRef();\n  // if this is a readOnly property, don't set a name with the form context\n  // this allows Select to control the form context for the name.\n  var _formContext$useFormI = formContext.useFormInput({\n      name: readOnly ? undefined : name,\n      value: valueProp\n    }),\n    value = _formContext$useFormI[0],\n    setValue = _formContext$useFormI[1];\n  var _useState = useState(),\n    focus = _useState[0],\n    setFocus = _useState[1];\n  var _useState2 = useState(false),\n    showDrop = _useState2[0],\n    setShowDrop = _useState2[1];\n  var handleSuggestionSelect = useMemo(function () {\n    return onSelect && !onSuggestionSelect ? onSelect : onSuggestionSelect;\n  }, [onSelect, onSuggestionSelect]);\n  var handleTextSelect = useMemo(function () {\n    return onSelect && onSuggestionSelect ? onSelect : undefined;\n  }, [onSelect, onSuggestionSelect]);\n  var _useState3 = useState(),\n    suggestionsAtClose = _useState3[0],\n    setSuggestionsAtClose = _useState3[1];\n  var openDrop = useCallback(function () {\n    setShowDrop(true);\n    announce(format({\n      id: 'textInput.suggestionIsOpen',\n      messages: messages\n    }));\n    announce(suggestions.length + \" \" + format({\n      id: 'textInput.suggestionsCount',\n      messages: messages\n    }));\n    if (onSuggestionsOpen) onSuggestionsOpen();\n  }, [announce, messages, format, onSuggestionsOpen, suggestions]);\n  var closeDrop = useCallback(function () {\n    setSuggestionsAtClose(suggestions); // must be before closing drop\n    setShowDrop(false);\n    if (onSuggestionsClose) onSuggestionsClose();\n  }, [onSuggestionsClose, suggestions]);\n  var clickOutside = useCallback(function (event) {\n    if (event.target !== inputRef.current) closeDrop();\n  }, [inputRef, closeDrop]);\n\n  // Handle scenarios where we have focus, the drop isn't showing,\n  // and the suggestions change. We don't want to open the drop if\n  // the drop has been closed by onEsc and the suggestions haven't\n  // changed. So, we remember the suggestions we are showing when\n  // the drop was closed and only re-open it when the suggestions\n  // subsequently change.\n  useEffect(function () {\n    if (focus && !showDrop && suggestions && suggestions.length && (!suggestionsAtClose || suggestionsAtClose.length !== suggestions.length)) {\n      openDrop();\n    }\n  }, [focus, openDrop, showDrop, suggestions, suggestionsAtClose]);\n\n  // if we have no suggestions, close drop if it's open\n  useEffect(function () {\n    if (showDrop && (!suggestions || !suggestions.length)) {\n      closeDrop();\n    }\n  }, [closeDrop, showDrop, suggestions]);\n  var valueSuggestionIndex = useMemo(function () {\n    return suggestions ? suggestions.map(function (suggestion) {\n      return typeof suggestion === 'object' ? suggestion.value : suggestion;\n    }).indexOf(value) : -1;\n  }, [suggestions, value]);\n\n  // choose the best suggestion, either the explicit default or the one\n  // that matches the current value\n  var resetSuggestionIndex = useMemo(function () {\n    if (valueSuggestionIndex === -1 && typeof defaultSuggestion === 'number') {\n      return defaultSuggestion;\n    }\n    return valueSuggestionIndex;\n  }, [defaultSuggestion, valueSuggestionIndex]);\n\n  // activeSuggestionIndex unifies mouse and keyboard interaction of\n  // the suggestions\n  var _useState4 = useState(resetSuggestionIndex),\n    activeSuggestionIndex = _useState4[0],\n    setActiveSuggestionIndex = _useState4[1];\n\n  // Only update active suggestion index when the mouse actually moves,\n  // not when suggestions are moving under the mouse.\n  var _useState5 = useState(),\n    mouseMovedSinceLastKey = _useState5[0],\n    setMouseMovedSinceLastKey = _useState5[1];\n\n  // set activeSuggestionIndex when value changes\n  useEffect(function () {\n    return setActiveSuggestionIndex(valueSuggestionIndex);\n  }, [valueSuggestionIndex]);\n\n  // reset activeSuggestionIndex when the drop is closed\n  useEffect(function () {\n    if (!showDrop) setActiveSuggestionIndex(resetSuggestionIndex);\n  }, [resetSuggestionIndex, showDrop]);\n\n  // announce active suggestion\n  useEffect(function () {\n    if (activeSuggestionIndex >= 0) {\n      var label = stringLabel(suggestions[activeSuggestionIndex]);\n      announce(label + \" \" + format({\n        id: 'textInput.enterSelect',\n        messages: messages\n      }));\n    }\n  }, [activeSuggestionIndex, announce, messages, format, suggestions]);\n\n  // make sure activeSuggestion is visible in scroll\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      var list = suggestionsRef.current;\n      if (showDrop && activeSuggestionIndex !== -1 && list) {\n        var container = list.parentNode;\n        var item = list.children[activeSuggestionIndex];\n        if (container.scrollTo) {\n          if (isNodeAfterScroll(item, container)) container.scrollTo(0, item.offsetTop - (container.getBoundingClientRect().height - item.getBoundingClientRect().height));else if (isNodeBeforeScroll(item, container)) container.scrollTo(0, item.offsetTop);\n        }\n      }\n    }, 50); // delay to allow Drop to animate in\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [activeSuggestionIndex, showDrop]);\n  var setValueFromSuggestion = function setValueFromSuggestion(event, suggestion) {\n    // if we stole the focus in the drop, perhaps by interacting with\n    // a suggestion button or the scrollbar, give it back\n    inputRef.current.focus();\n    inputRef.current.value = suggestion; // needed for uncontrolled cases\n    closeDrop();\n    if (handleSuggestionSelect) {\n      if (event.persist) event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.suggestion = suggestion;\n      handleSuggestionSelect(adjustedEvent);\n    }\n    setValue(suggestion);\n  };\n  var onNextSuggestion = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.min(activeSuggestionIndex + 1, suggestions.length - 1);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex, suggestions]);\n  var onPreviousSuggestion = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.max(activeSuggestionIndex - 1, 0);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex]);\n\n  // account for input value in both controlled and uncontrolled scenarios\n  var hasValue = value || ((_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.value);\n  var showStyledPlaceholder = useMemo(function () {\n    return placeholder && typeof placeholder !== 'string' && !hasValue;\n  }, [hasValue, placeholder]);\n  var drop;\n  var extraProps = {\n    onSelect: handleTextSelect\n  };\n  if (showDrop) {\n    drop = /*#__PURE__*/React.createElement(Drop, _extends({\n      ref: dropRef,\n      id: id ? \"text-input-drop__\" + id : undefined,\n      align: dropAlign,\n      responsive: false,\n      target: dropTarget || inputRef.current,\n      onClickOutside: clickOutside,\n      onEsc: closeDrop\n    }, dropProps), /*#__PURE__*/React.createElement(ContainerBox, {\n      id: id ? \"listbox__\" + id : undefined,\n      role: \"listbox\",\n      overflow: \"auto\",\n      dropHeight: dropHeight,\n      onMouseMove: function onMouseMove() {\n        return setMouseMovedSinceLastKey(true);\n      }\n    }, /*#__PURE__*/React.createElement(StyledSuggestions, {\n      ref: suggestionsRef\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      items: suggestions,\n      step: theme.select.step,\n      show: activeSuggestionIndex !== -1 ? activeSuggestionIndex : undefined\n    }, function (suggestion, index, itemRef) {\n      var active = activeSuggestionIndex === index;\n      var selected = suggestion === value;\n      // Determine whether the label is done as a child or\n      // as an option Button kind property.\n      var renderedLabel = renderLabel(suggestion);\n      var child;\n      if (typeof renderedLabel !== 'string')\n        // must be an element rendered by suggestions.label\n        child = renderedLabel;else if (!theme.button.option)\n        // don't have theme support, need to layout here\n        child = /*#__PURE__*/React.createElement(Box, {\n          align: \"start\",\n          pad: \"small\"\n        }, renderedLabel);\n      // if we have a child, turn on plain\n\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: stringLabel(suggestion) + \"-\" + index,\n        ref: itemRef\n      }, /*#__PURE__*/React.createElement(Button, {\n        id: id ? \"listbox-option-\" + index + \"__\" + id : undefined,\n        role: \"option\",\n        \"aria-selected\": selected ? 'true' : 'false',\n        active: active,\n        fill: \"horizontal\",\n        plain: !child ? undefined : true,\n        align: \"start\",\n        kind: !child ? 'option' : undefined,\n        label: !child ? renderedLabel : undefined,\n        onClick: function onClick(event) {\n          return setValueFromSuggestion(event, suggestion);\n        },\n        onMouseMove: mouseMovedSinceLastKey && activeSuggestionIndex !== index ? function () {\n          return setActiveSuggestionIndex(index);\n        } : undefined\n      }, child));\n    }))));\n  }\n  var keyboardProps = {\n    onKeyDown: onKeyDown\n  };\n  if (showDrop) {\n    keyboardProps.onEnter = function (event) {\n      // prevent submitting forms via Enter when the drop is open\n      event.preventDefault();\n      if (activeSuggestionIndex >= 0) setValueFromSuggestion(event, suggestions[activeSuggestionIndex]);else closeDrop();\n    };\n    if (activeSuggestionIndex > 0) keyboardProps.onUp = onPreviousSuggestion;\n    if (activeSuggestionIndex < suggestions.length - 1) keyboardProps.onDown = onNextSuggestion;\n    keyboardProps.onTab = closeDrop;\n  } else if (suggestions && suggestions.length > 0) {\n    keyboardProps.onDown = openDrop;\n  }\n\n  /*\n  If the text input has a list of suggestions, add the WAI-ARIA 1.2\n  combobox role and states.\n  */\n  var comboboxProps = {};\n  var activeOptionID;\n  if (id && (suggestions == null ? void 0 : suggestions.length) > -1) {\n    if (showDrop && activeSuggestionIndex > -1) {\n      activeOptionID = \"listbox-option-\" + activeSuggestionIndex + \"__\" + id;\n    }\n    comboboxProps = {\n      'aria-activedescendant': activeOptionID,\n      'aria-autocomplete': 'list',\n      'aria-expanded': showDrop ? 'true' : 'false',\n      'aria-controls': showDrop ? \"listbox__\" + id : undefined,\n      role: 'combobox'\n    };\n  }\n  // For the Keyboard target below, if we have focus,\n  // either on the input element or within the drop,\n  // then we set the target to the document,\n  // otherwise we only listen to onDown on the input element itself,\n  // primarily for tests.\n\n  var textInputIcon = useSizedIcon(icon, rest.size, theme);\n  return /*#__PURE__*/React.createElement(StyledTextInputContainer, {\n    plain: plain\n  }, showStyledPlaceholder && /*#__PURE__*/React.createElement(StyledPlaceholder, null, placeholder), textInputIcon && /*#__PURE__*/React.createElement(StyledIcon, {\n    reverse: reverse,\n    theme: theme\n  }, textInputIcon), /*#__PURE__*/React.createElement(Keyboard, _extends({\n    target: focus ? 'document' : undefined\n  }, keyboardProps), /*#__PURE__*/React.createElement(StyledTextInput, _extends({\n    \"aria-label\": a11yTitle,\n    ref: inputRef,\n    id: id,\n    name: name,\n    autoComplete: \"off\",\n    plain: plain,\n    placeholder: typeof placeholder === 'string' ? placeholder : undefined,\n    icon: icon,\n    reverse: reverse,\n    focus: focus,\n    focusIndicator: focusIndicator,\n    textAlign: textAlign,\n    widthProp: widthProp\n  }, rest, extraProps, comboboxProps, {\n    defaultValue: renderLabel(defaultValue),\n    value: renderLabel(value),\n    readOnly: readOnly,\n    onFocus: function onFocus(event) {\n      // Don't do anything if we are acting like we already have\n      // focus. This can happen when this input loses focus temporarily\n      // to our drop, see onBlur() handler below.\n      if (!focus) {\n        setFocus(true);\n        if (suggestions && suggestions.length > 0) {\n          announce(format({\n            id: 'textInput.suggestionsExist',\n            messages: messages\n          }));\n          openDrop();\n        }\n        if (_onFocus) _onFocus(event);\n      }\n    },\n    onBlur: function onBlur(event) {\n      // Only treat it as a blur if the element receiving focus\n      // isn't in our drop. The relatedTarget will be our drop\n      // when the user clicks on a suggestion or interacts with the\n      // scrollbar in the drop.\n      if (!event.relatedTarget || event.relatedTarget !== dropRef.current) {\n        setFocus(false);\n        if (_onBlur) _onBlur(event);\n      }\n    },\n    onChange: readOnly ? undefined : function (event) {\n      // when TextInput is not contained in a Form, no re-render\n      // will come from this onChange and remove the placeholder\n      // so we need to update state to ensure the styled\n      // placeholder only appears when there is no value\n      if (suggestions && focus && !showDrop) {\n        openDrop();\n      }\n      setValue(event.target.value);\n      setActiveSuggestionIndex(resetSuggestionIndex);\n      if (onChange) onChange(event);\n    }\n  }))), drop);\n});\nTextInput.displayName = 'TextInput';\nTextInput.propTypes = TextInputPropTypes;\nexport { TextInput };","map":{"version":3,"names":["_excluded","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","React","forwardRef","useCallback","useContext","useEffect","useMemo","useRef","useState","styled","ThemeContext","defaultProps","Box","Button","Drop","InfiniteScroll","Keyboard","FormContext","AnnounceContext","isNodeAfterScroll","isNodeBeforeScroll","sizeStyle","useForwardedRef","useSizedIcon","StyledTextInput","StyledTextInputContainer","StyledPlaceholder","StyledIcon","StyledSuggestions","MessageContext","TextInputPropTypes","renderLabel","suggestion","label","value","stringLabel","ContainerBox","withConfig","displayName","componentId","props","dropHeight","theme","defaultDropAlign","top","left","TextInput","_ref","ref","_inputRef$current","a11yTitle","defaultSuggestion","defaultValue","_ref$dropAlign","dropAlign","dropTarget","dropProps","_ref$focusIndicator","focusIndicator","icon","id","messages","name","_onBlur","onBlur","onChange","_onFocus","onFocus","onKeyDown","onSelect","onSuggestionSelect","onSuggestionsClose","onSuggestionsOpen","placeholder","plain","readOnly","reverse","suggestions","textAlign","valueProp","widthProp","width","rest","_useContext","format","announce","formContext","inputRef","dropRef","suggestionsRef","_formContext$useFormI","useFormInput","undefined","setValue","_useState","focus","setFocus","_useState2","showDrop","setShowDrop","handleSuggestionSelect","handleTextSelect","_useState3","suggestionsAtClose","setSuggestionsAtClose","openDrop","closeDrop","clickOutside","event","current","valueSuggestionIndex","map","resetSuggestionIndex","_useState4","activeSuggestionIndex","setActiveSuggestionIndex","_useState5","mouseMovedSinceLastKey","setMouseMovedSinceLastKey","timer","setTimeout","list","container","parentNode","item","children","scrollTo","offsetTop","getBoundingClientRect","height","clearTimeout","setValueFromSuggestion","persist","adjustedEvent","onNextSuggestion","preventDefault","nextActiveIndex","Math","min","onPreviousSuggestion","max","hasValue","showStyledPlaceholder","drop","extraProps","createElement","align","responsive","onClickOutside","onEsc","role","overflow","onMouseMove","items","step","select","show","index","itemRef","active","selected","renderedLabel","child","button","option","pad","fill","kind","onClick","keyboardProps","onEnter","onUp","onDown","onTab","comboboxProps","activeOptionID","textInputIcon","size","autoComplete","relatedTarget","propTypes"],"sources":["/Users/kyle/node_modules/grommet/es6/components/TextInput/TextInput.js"],"sourcesContent":["var _excluded = [\"a11yTitle\", \"defaultSuggestion\", \"defaultValue\", \"dropAlign\", \"dropHeight\", \"dropTarget\", \"dropProps\", \"focusIndicator\", \"icon\", \"id\", \"messages\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onSelect\", \"onSuggestionSelect\", \"onSuggestionsClose\", \"onSuggestionsOpen\", \"placeholder\", \"plain\", \"readOnly\", \"reverse\", \"suggestions\", \"textAlign\", \"value\", \"width\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React, { forwardRef, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { FormContext } from '../Form/FormContext';\nimport { AnnounceContext } from '../../contexts';\nimport { isNodeAfterScroll, isNodeBeforeScroll, sizeStyle, useForwardedRef, useSizedIcon } from '../../utils';\nimport { StyledTextInput, StyledTextInputContainer, StyledPlaceholder, StyledIcon, StyledSuggestions } from './StyledTextInput';\nimport { MessageContext } from '../../contexts/MessageContext';\nimport { TextInputPropTypes } from './propTypes';\nvar renderLabel = function renderLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    return suggestion.label || suggestion.value;\n  }\n  return suggestion;\n};\nvar stringLabel = function stringLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    if (suggestion.label && typeof suggestion.label === 'string') {\n      return suggestion.label;\n    }\n    return suggestion.value;\n  }\n  return suggestion;\n};\nvar ContainerBox = styled(Box).withConfig({\n  displayName: \"TextInput__ContainerBox\",\n  componentId: \"sc-1ai0c08-0\"\n})([\"\", \";@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\"], function (props) {\n  return props.dropHeight ? sizeStyle('max-height', props.dropHeight, props.theme) : 'max-height: inherit;';\n});\nvar defaultDropAlign = {\n  top: 'bottom',\n  left: 'left'\n};\nvar TextInput = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _inputRef$current;\n  var a11yTitle = _ref.a11yTitle,\n    defaultSuggestion = _ref.defaultSuggestion,\n    defaultValue = _ref.defaultValue,\n    _ref$dropAlign = _ref.dropAlign,\n    dropAlign = _ref$dropAlign === void 0 ? defaultDropAlign : _ref$dropAlign,\n    dropHeight = _ref.dropHeight,\n    dropTarget = _ref.dropTarget,\n    dropProps = _ref.dropProps,\n    _ref$focusIndicator = _ref.focusIndicator,\n    focusIndicator = _ref$focusIndicator === void 0 ? true : _ref$focusIndicator,\n    icon = _ref.icon,\n    id = _ref.id,\n    messages = _ref.messages,\n    name = _ref.name,\n    _onBlur = _ref.onBlur,\n    onChange = _ref.onChange,\n    _onFocus = _ref.onFocus,\n    onKeyDown = _ref.onKeyDown,\n    onSelect = _ref.onSelect,\n    onSuggestionSelect = _ref.onSuggestionSelect,\n    onSuggestionsClose = _ref.onSuggestionsClose,\n    onSuggestionsOpen = _ref.onSuggestionsOpen,\n    placeholder = _ref.placeholder,\n    plain = _ref.plain,\n    readOnly = _ref.readOnly,\n    reverse = _ref.reverse,\n    suggestions = _ref.suggestions,\n    textAlign = _ref.textAlign,\n    valueProp = _ref.value,\n    widthProp = _ref.width,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var _useContext = useContext(MessageContext),\n    format = _useContext.format;\n  var announce = useContext(AnnounceContext);\n  var formContext = useContext(FormContext);\n  var inputRef = useForwardedRef(ref);\n  var dropRef = useRef();\n  var suggestionsRef = useRef();\n  // if this is a readOnly property, don't set a name with the form context\n  // this allows Select to control the form context for the name.\n  var _formContext$useFormI = formContext.useFormInput({\n      name: readOnly ? undefined : name,\n      value: valueProp\n    }),\n    value = _formContext$useFormI[0],\n    setValue = _formContext$useFormI[1];\n  var _useState = useState(),\n    focus = _useState[0],\n    setFocus = _useState[1];\n  var _useState2 = useState(false),\n    showDrop = _useState2[0],\n    setShowDrop = _useState2[1];\n  var handleSuggestionSelect = useMemo(function () {\n    return onSelect && !onSuggestionSelect ? onSelect : onSuggestionSelect;\n  }, [onSelect, onSuggestionSelect]);\n  var handleTextSelect = useMemo(function () {\n    return onSelect && onSuggestionSelect ? onSelect : undefined;\n  }, [onSelect, onSuggestionSelect]);\n  var _useState3 = useState(),\n    suggestionsAtClose = _useState3[0],\n    setSuggestionsAtClose = _useState3[1];\n  var openDrop = useCallback(function () {\n    setShowDrop(true);\n    announce(format({\n      id: 'textInput.suggestionIsOpen',\n      messages: messages\n    }));\n    announce(suggestions.length + \" \" + format({\n      id: 'textInput.suggestionsCount',\n      messages: messages\n    }));\n    if (onSuggestionsOpen) onSuggestionsOpen();\n  }, [announce, messages, format, onSuggestionsOpen, suggestions]);\n  var closeDrop = useCallback(function () {\n    setSuggestionsAtClose(suggestions); // must be before closing drop\n    setShowDrop(false);\n    if (onSuggestionsClose) onSuggestionsClose();\n  }, [onSuggestionsClose, suggestions]);\n  var clickOutside = useCallback(function (event) {\n    if (event.target !== inputRef.current) closeDrop();\n  }, [inputRef, closeDrop]);\n\n  // Handle scenarios where we have focus, the drop isn't showing,\n  // and the suggestions change. We don't want to open the drop if\n  // the drop has been closed by onEsc and the suggestions haven't\n  // changed. So, we remember the suggestions we are showing when\n  // the drop was closed and only re-open it when the suggestions\n  // subsequently change.\n  useEffect(function () {\n    if (focus && !showDrop && suggestions && suggestions.length && (!suggestionsAtClose || suggestionsAtClose.length !== suggestions.length)) {\n      openDrop();\n    }\n  }, [focus, openDrop, showDrop, suggestions, suggestionsAtClose]);\n\n  // if we have no suggestions, close drop if it's open\n  useEffect(function () {\n    if (showDrop && (!suggestions || !suggestions.length)) {\n      closeDrop();\n    }\n  }, [closeDrop, showDrop, suggestions]);\n  var valueSuggestionIndex = useMemo(function () {\n    return suggestions ? suggestions.map(function (suggestion) {\n      return typeof suggestion === 'object' ? suggestion.value : suggestion;\n    }).indexOf(value) : -1;\n  }, [suggestions, value]);\n\n  // choose the best suggestion, either the explicit default or the one\n  // that matches the current value\n  var resetSuggestionIndex = useMemo(function () {\n    if (valueSuggestionIndex === -1 && typeof defaultSuggestion === 'number') {\n      return defaultSuggestion;\n    }\n    return valueSuggestionIndex;\n  }, [defaultSuggestion, valueSuggestionIndex]);\n\n  // activeSuggestionIndex unifies mouse and keyboard interaction of\n  // the suggestions\n  var _useState4 = useState(resetSuggestionIndex),\n    activeSuggestionIndex = _useState4[0],\n    setActiveSuggestionIndex = _useState4[1];\n\n  // Only update active suggestion index when the mouse actually moves,\n  // not when suggestions are moving under the mouse.\n  var _useState5 = useState(),\n    mouseMovedSinceLastKey = _useState5[0],\n    setMouseMovedSinceLastKey = _useState5[1];\n\n  // set activeSuggestionIndex when value changes\n  useEffect(function () {\n    return setActiveSuggestionIndex(valueSuggestionIndex);\n  }, [valueSuggestionIndex]);\n\n  // reset activeSuggestionIndex when the drop is closed\n  useEffect(function () {\n    if (!showDrop) setActiveSuggestionIndex(resetSuggestionIndex);\n  }, [resetSuggestionIndex, showDrop]);\n\n  // announce active suggestion\n  useEffect(function () {\n    if (activeSuggestionIndex >= 0) {\n      var label = stringLabel(suggestions[activeSuggestionIndex]);\n      announce(label + \" \" + format({\n        id: 'textInput.enterSelect',\n        messages: messages\n      }));\n    }\n  }, [activeSuggestionIndex, announce, messages, format, suggestions]);\n\n  // make sure activeSuggestion is visible in scroll\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      var list = suggestionsRef.current;\n      if (showDrop && activeSuggestionIndex !== -1 && list) {\n        var container = list.parentNode;\n        var item = list.children[activeSuggestionIndex];\n        if (container.scrollTo) {\n          if (isNodeAfterScroll(item, container)) container.scrollTo(0, item.offsetTop - (container.getBoundingClientRect().height - item.getBoundingClientRect().height));else if (isNodeBeforeScroll(item, container)) container.scrollTo(0, item.offsetTop);\n        }\n      }\n    }, 50); // delay to allow Drop to animate in\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [activeSuggestionIndex, showDrop]);\n  var setValueFromSuggestion = function setValueFromSuggestion(event, suggestion) {\n    // if we stole the focus in the drop, perhaps by interacting with\n    // a suggestion button or the scrollbar, give it back\n    inputRef.current.focus();\n    inputRef.current.value = suggestion; // needed for uncontrolled cases\n    closeDrop();\n    if (handleSuggestionSelect) {\n      if (event.persist) event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.suggestion = suggestion;\n      handleSuggestionSelect(adjustedEvent);\n    }\n    setValue(suggestion);\n  };\n  var onNextSuggestion = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.min(activeSuggestionIndex + 1, suggestions.length - 1);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex, suggestions]);\n  var onPreviousSuggestion = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.max(activeSuggestionIndex - 1, 0);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex]);\n\n  // account for input value in both controlled and uncontrolled scenarios\n  var hasValue = value || ((_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.value);\n  var showStyledPlaceholder = useMemo(function () {\n    return placeholder && typeof placeholder !== 'string' && !hasValue;\n  }, [hasValue, placeholder]);\n  var drop;\n  var extraProps = {\n    onSelect: handleTextSelect\n  };\n  if (showDrop) {\n    drop = /*#__PURE__*/React.createElement(Drop, _extends({\n      ref: dropRef,\n      id: id ? \"text-input-drop__\" + id : undefined,\n      align: dropAlign,\n      responsive: false,\n      target: dropTarget || inputRef.current,\n      onClickOutside: clickOutside,\n      onEsc: closeDrop\n    }, dropProps), /*#__PURE__*/React.createElement(ContainerBox, {\n      id: id ? \"listbox__\" + id : undefined,\n      role: \"listbox\",\n      overflow: \"auto\",\n      dropHeight: dropHeight,\n      onMouseMove: function onMouseMove() {\n        return setMouseMovedSinceLastKey(true);\n      }\n    }, /*#__PURE__*/React.createElement(StyledSuggestions, {\n      ref: suggestionsRef\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      items: suggestions,\n      step: theme.select.step,\n      show: activeSuggestionIndex !== -1 ? activeSuggestionIndex : undefined\n    }, function (suggestion, index, itemRef) {\n      var active = activeSuggestionIndex === index;\n      var selected = suggestion === value;\n      // Determine whether the label is done as a child or\n      // as an option Button kind property.\n      var renderedLabel = renderLabel(suggestion);\n      var child;\n      if (typeof renderedLabel !== 'string')\n        // must be an element rendered by suggestions.label\n        child = renderedLabel;else if (!theme.button.option)\n        // don't have theme support, need to layout here\n        child = /*#__PURE__*/React.createElement(Box, {\n          align: \"start\",\n          pad: \"small\"\n        }, renderedLabel);\n      // if we have a child, turn on plain\n\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: stringLabel(suggestion) + \"-\" + index,\n        ref: itemRef\n      }, /*#__PURE__*/React.createElement(Button, {\n        id: id ? \"listbox-option-\" + index + \"__\" + id : undefined,\n        role: \"option\",\n        \"aria-selected\": selected ? 'true' : 'false',\n        active: active,\n        fill: \"horizontal\",\n        plain: !child ? undefined : true,\n        align: \"start\",\n        kind: !child ? 'option' : undefined,\n        label: !child ? renderedLabel : undefined,\n        onClick: function onClick(event) {\n          return setValueFromSuggestion(event, suggestion);\n        },\n        onMouseMove: mouseMovedSinceLastKey && activeSuggestionIndex !== index ? function () {\n          return setActiveSuggestionIndex(index);\n        } : undefined\n      }, child));\n    }))));\n  }\n  var keyboardProps = {\n    onKeyDown: onKeyDown\n  };\n  if (showDrop) {\n    keyboardProps.onEnter = function (event) {\n      // prevent submitting forms via Enter when the drop is open\n      event.preventDefault();\n      if (activeSuggestionIndex >= 0) setValueFromSuggestion(event, suggestions[activeSuggestionIndex]);else closeDrop();\n    };\n    if (activeSuggestionIndex > 0) keyboardProps.onUp = onPreviousSuggestion;\n    if (activeSuggestionIndex < suggestions.length - 1) keyboardProps.onDown = onNextSuggestion;\n    keyboardProps.onTab = closeDrop;\n  } else if (suggestions && suggestions.length > 0) {\n    keyboardProps.onDown = openDrop;\n  }\n\n  /*\n  If the text input has a list of suggestions, add the WAI-ARIA 1.2\n  combobox role and states.\n  */\n  var comboboxProps = {};\n  var activeOptionID;\n  if (id && (suggestions == null ? void 0 : suggestions.length) > -1) {\n    if (showDrop && activeSuggestionIndex > -1) {\n      activeOptionID = \"listbox-option-\" + activeSuggestionIndex + \"__\" + id;\n    }\n    comboboxProps = {\n      'aria-activedescendant': activeOptionID,\n      'aria-autocomplete': 'list',\n      'aria-expanded': showDrop ? 'true' : 'false',\n      'aria-controls': showDrop ? \"listbox__\" + id : undefined,\n      role: 'combobox'\n    };\n  }\n  // For the Keyboard target below, if we have focus,\n  // either on the input element or within the drop,\n  // then we set the target to the document,\n  // otherwise we only listen to onDown on the input element itself,\n  // primarily for tests.\n\n  var textInputIcon = useSizedIcon(icon, rest.size, theme);\n  return /*#__PURE__*/React.createElement(StyledTextInputContainer, {\n    plain: plain\n  }, showStyledPlaceholder && /*#__PURE__*/React.createElement(StyledPlaceholder, null, placeholder), textInputIcon && /*#__PURE__*/React.createElement(StyledIcon, {\n    reverse: reverse,\n    theme: theme\n  }, textInputIcon), /*#__PURE__*/React.createElement(Keyboard, _extends({\n    target: focus ? 'document' : undefined\n  }, keyboardProps), /*#__PURE__*/React.createElement(StyledTextInput, _extends({\n    \"aria-label\": a11yTitle,\n    ref: inputRef,\n    id: id,\n    name: name,\n    autoComplete: \"off\",\n    plain: plain,\n    placeholder: typeof placeholder === 'string' ? placeholder : undefined,\n    icon: icon,\n    reverse: reverse,\n    focus: focus,\n    focusIndicator: focusIndicator,\n    textAlign: textAlign,\n    widthProp: widthProp\n  }, rest, extraProps, comboboxProps, {\n    defaultValue: renderLabel(defaultValue),\n    value: renderLabel(value),\n    readOnly: readOnly,\n    onFocus: function onFocus(event) {\n      // Don't do anything if we are acting like we already have\n      // focus. This can happen when this input loses focus temporarily\n      // to our drop, see onBlur() handler below.\n      if (!focus) {\n        setFocus(true);\n        if (suggestions && suggestions.length > 0) {\n          announce(format({\n            id: 'textInput.suggestionsExist',\n            messages: messages\n          }));\n          openDrop();\n        }\n        if (_onFocus) _onFocus(event);\n      }\n    },\n    onBlur: function onBlur(event) {\n      // Only treat it as a blur if the element receiving focus\n      // isn't in our drop. The relatedTarget will be our drop\n      // when the user clicks on a suggestion or interacts with the\n      // scrollbar in the drop.\n      if (!event.relatedTarget || event.relatedTarget !== dropRef.current) {\n        setFocus(false);\n        if (_onBlur) _onBlur(event);\n      }\n    },\n    onChange: readOnly ? undefined : function (event) {\n      // when TextInput is not contained in a Form, no re-render\n      // will come from this onChange and remove the placeholder\n      // so we need to update state to ensure the styled\n      // placeholder only appears when there is no value\n      if (suggestions && focus && !showDrop) {\n        openDrop();\n      }\n      setValue(event.target.value);\n      setActiveSuggestionIndex(resetSuggestionIndex);\n      if (onChange) onChange(event);\n    }\n  }))), drop);\n});\nTextInput.displayName = 'TextInput';\nTextInput.propTypes = TextInputPropTypes;\nexport { TextInput };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}