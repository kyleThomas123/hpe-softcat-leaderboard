{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/projects/personal/hpe-react-practice/src/components/Page/SinglePageContent.js\",\n  _s = $RefreshSig$();\n// SinglePageContent.js\nimport PropTypes from 'prop-types';\nimport { Anchor, Card, Grid, Header, Heading, Page, PageContent, PageHeader, Paragraph, Text } from 'grommet';\nimport { hpe } from 'grommet-theme-hpe';\n\n// import { FilterControls, FiltersProvider, useFilters } from '../../templates';\n// import trainingDataSets from '../../../data/mockData/trainingDataSets.json';\n// `demoStyle` is specific for the Design System site and is used\n// as a visual aid to help present layout concepts. Remove from\n// your implementation.\n// import { demoStyle } from './demoStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultCategories = {\n  Trending: {\n    title: 'Trending',\n    sources: []\n  },\n  Classification: {\n    title: 'Classification',\n    sources: []\n  },\n  Population: {\n    title: 'Population',\n    sources: []\n  },\n  Economics: {\n    title: 'Economics',\n    sources: []\n  }\n};\nexport const SinglePageContent = ({\n  containerRef\n}) => {\n  // containerRef is for demonstration purposes on this site. Most\n  // implementations should likely remove.\n\n  // Group data by categories.\n  //   const categories = trainingDataSets.reduce((acc, cur) => {\n  //     cur.categories.forEach(category => {\n  //       if (acc[category] && !acc[category].sources.includes(cur))\n  //         acc[category].sources.push(cur);\n  //     });\n  //     return acc;\n  //   }, defaultCategories);\n\n  //   // FilterControls prop values\n  //   const filterControls = {\n  //     filtersConfig: [\n  //       { property: 'title', label: 'Data Source', filterType: 'CheckBoxGroup' },\n  //     ],\n  //     layerProps: {\n  //       // containerRef is for demonstration purposes on this site. Most\n  //       // implementations should likely remove.\n  //       target: containerRef && containerRef.current,\n  //     },\n  //     searchFilter: {\n  //       placeholder: 'Search',\n  //     },\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    background: \"background-back\",\n    flex: \"grow\",\n    pad: {\n      vertical: 'large'\n    },\n    children: /*#__PURE__*/_jsxDEV(PageContent, {\n      gap: \"large\",\n      ...demoStyle,\n      children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n        title: \"Explore datasets\",\n        subtitle: `Explore datasets from a variety of sources without reliance\n          on IT or governance and compliance.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paragraph, {\n        margin: \"none\",\n        children: \"Discover, analyze, and share quality data. Learn more about data types, creating, and collaborating.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_c = SinglePageContent;\nSinglePageContent.propTypes = {\n  containerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n};\nconst Datasets = ({\n  data,\n  categories\n}) => {\n  _s();\n  const {\n    filteredResults\n  } = useFilters();\n  return filteredResults.length !== data.length ? /*#__PURE__*/_jsxDEV(Grid, {\n    columns: {\n      count: 'fill',\n      size: 'small'\n    },\n    rows: \"small\",\n    gap: \"small\",\n    children: filteredResults && filteredResults.map(source => /*#__PURE__*/_jsxDEV(Card, {}, source.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 39\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this) : categories && Object.entries(categories).map(([key, value]) => /*#__PURE__*/_jsxDEV(Category, {\n    category: value\n  }, key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this));\n};\n_s(Datasets, \"0QQ1ISVrlrh1RI7SYTTFEqgrgZo=\", true);\n_c2 = Datasets;\nDatasets.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n  categories: PropTypes.object\n};\nconst Category = ({\n  category\n}) => /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(Header, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      level: 2,\n      children: category.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: /*#__PURE__*/_jsxDEV(Anchor, {\n        href: \"#\",\n        label: \"See all\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n    columns: {\n      count: 'fill',\n      size: 'small'\n    },\n    rows: \"small\",\n    gap: \"small\",\n    children: category && category.sources.slice(0, 7).map(source => /*#__PURE__*/_jsxDEV(Card, {}, source.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 52\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this)]\n}, void 0, true);\n_c3 = Category;\nCategory.propTypes = {\n  category: PropTypes.shape({\n    title: PropTypes.string,\n    sources: PropTypes.arrayOf(PropTypes.object)\n  })\n};\nexport default SinglePageContent;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SinglePageContent\");\n$RefreshReg$(_c2, \"Datasets\");\n$RefreshReg$(_c3, \"Category\");","map":{"version":3,"names":["PropTypes","Anchor","Card","Grid","Header","Heading","Page","PageContent","PageHeader","Paragraph","Text","hpe","jsxDEV","_jsxDEV","Fragment","_Fragment","defaultCategories","Trending","title","sources","Classification","Population","Economics","SinglePageContent","containerRef","background","flex","pad","vertical","children","gap","demoStyle","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","margin","_c","propTypes","oneOfType","func","object","Datasets","data","categories","_s","filteredResults","useFilters","length","columns","count","size","rows","map","source","id","Object","entries","key","value","Category","category","_c2","arrayOf","level","href","label","slice","_c3","shape","string","$RefreshReg$"],"sources":["/Users/kyle/projects/personal/hpe-react-practice/src/components/Page/SinglePageContent.js"],"sourcesContent":["// SinglePageContent.js\nimport PropTypes from 'prop-types';\nimport {\n  Anchor,\n  Card,\n  Grid,\n  Header,\n  Heading,\n  Page,\n  PageContent,\n  PageHeader,\n  Paragraph,\n  Text,\n} from 'grommet';\nimport { hpe } from 'grommet-theme-hpe';\n\n// import { FilterControls, FiltersProvider, useFilters } from '../../templates';\n// import trainingDataSets from '../../../data/mockData/trainingDataSets.json';\n// `demoStyle` is specific for the Design System site and is used\n// as a visual aid to help present layout concepts. Remove from\n// your implementation.\n// import { demoStyle } from './demoStyle';\n\nconst defaultCategories = {\n  Trending: { title: 'Trending', sources: [] },\n  Classification: { title: 'Classification', sources: [] },\n  Population: { title: 'Population', sources: [] },\n  Economics: { title: 'Economics', sources: [] },\n};\n\nexport const SinglePageContent = ({ containerRef }) => {\n  // containerRef is for demonstration purposes on this site. Most\n  // implementations should likely remove.\n\n  // Group data by categories.\n//   const categories = trainingDataSets.reduce((acc, cur) => {\n//     cur.categories.forEach(category => {\n//       if (acc[category] && !acc[category].sources.includes(cur))\n//         acc[category].sources.push(cur);\n//     });\n//     return acc;\n//   }, defaultCategories);\n\n//   // FilterControls prop values\n//   const filterControls = {\n//     filtersConfig: [\n//       { property: 'title', label: 'Data Source', filterType: 'CheckBoxGroup' },\n//     ],\n//     layerProps: {\n//       // containerRef is for demonstration purposes on this site. Most\n//       // implementations should likely remove.\n//       target: containerRef && containerRef.current,\n//     },\n//     searchFilter: {\n//       placeholder: 'Search',\n//     },\n//   };\n\n  return (\n    <Page\n      background=\"background-back\"\n      flex=\"grow\"\n      pad={{ vertical: 'large' }}\n    >\n      <PageContent gap=\"large\" {...demoStyle}>\n        <PageHeader\n          title=\"Explore datasets\"\n          subtitle={`Explore datasets from a variety of sources without reliance\n          on IT or governance and compliance.`}\n        />\n        <Paragraph margin=\"none\">\n          Discover, analyze, and share quality data. Learn more about data\n          types, creating, and collaborating.\n        </Paragraph>\n        {/* <FiltersProvider>\n          <FilterControls data={trainingDataSets} {...filterControls} />\n          <Datasets data={trainingDataSets} categories={categories} />\n        </FiltersProvider> */}\n      </PageContent>\n    </Page>\n  );\n};\n\nSinglePageContent.propTypes = {\n  containerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n};\n\nconst Datasets = ({ data, categories }) => {\n  const { filteredResults } = useFilters();\n\n  return filteredResults.length !== data.length ? (\n    <Grid columns={{ count: 'fill', size: 'small' }} rows=\"small\" gap=\"small\">\n      {filteredResults &&\n        filteredResults.map(source => <Card key={source.id} />)}\n    </Grid>\n  ) : (\n    categories &&\n      Object.entries(categories).map(([key, value]) => (\n        <Category key={key} category={value} />\n      ))\n  );\n};\n\nDatasets.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n  categories: PropTypes.object,\n};\n\nconst Category = ({ category }) => (\n  <>\n    <Header>\n      <Heading level={2}>{category.title}</Heading>\n      <Text>\n        <Anchor href=\"#\" label=\"See all\" />\n      </Text>\n    </Header>\n    <Grid columns={{ count: 'fill', size: 'small' }} rows=\"small\" gap=\"small\">\n      {category &&\n        category.sources.slice(0, 7).map(source => <Card key={source.id} />)}\n    </Grid>\n  </>\n);\n\nCategory.propTypes = {\n  category: PropTypes.shape({\n    title: PropTypes.string,\n    sources: PropTypes.arrayOf(PropTypes.object),\n  }),\n};\n\nexport default SinglePageContent"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}